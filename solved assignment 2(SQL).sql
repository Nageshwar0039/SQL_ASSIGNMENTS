-- ASSIGNMENT 2
-- PRACTICE QUESTIONS

-- A. BASIC AGGREGATE FUNCTIONS :

-- QUESTION 1:
-- RETRIEVE THE TOTAL NUMBER OF RENTALS MADE IN THE MAVENMOVIES DATABASE. 
SELECT 
    *
FROM
    mavenmovies.rental;

SELECT 
    COUNT(rental_id) AS number_of_rentals
FROM
    rental;
    
-- QUESTION 2:
-- FIND THE AVERAGE RENTAL DURATION (IN DAYS) OF MOVIES RENTED FROM THE MAVENMOVIES DATABASE.
SELECT 
    *
FROM
    mavenmovies.film;

SELECT 
    AVG(rental_duration) AS average_rental_duration
FROM
    film;
    
-- B. STRING FUNCTIONS:

-- QUESTION 1:
-- DISPLAY THE FIRST NAME AND LAST NAME OF CUSTOMERS IN UPPERCASE.
SELECT 
    *
FROM
    mavenmovies.customer;

SELECT 
    UPPER(CONCAT(first_name, ' ', last_name)) AS NAME
FROM
    customer;

-- QUESTION 2:
-- EXTRACT THE MONTH FROM THE RENTAL DATE AND DISPLAY IT ALONGSIDE THE RENTAL ID.
SELECT 
    *
FROM
    mavenmovies.rental;

SELECT 
    RENTAL_ID, MONTH(RENTAL_DATE)
FROM
    RENTAL;
    
-- C. GROUP BY:

-- OUESTION 1:    
-- RETRIEVE THE COUNT OF RENTALS FOR EACH CUSTOMER(DISPLAY CUSTOMER ID AND THE COUNT OF RENTALS).
SELECT 
    *
FROM
    mavenmovies.payment;

SELECT 
    CUSTOMER_ID, COUNT(RENTAL_ID) AS COUNT_OF_RENTALS
FROM
    PAYMENT
GROUP BY CUSTOMER_ID;

-- QUESTION 2:
-- FIND THE TOTAL REVENUE GENERATED BY EACH STAFF.
SELECT 
    *
FROM
    mavenmovies.payment;

SELECT 
    STAFF_ID, SUM(AMOUNT)
FROM
    PAYMENT
GROUP BY STAFF_ID;

-- D. JOINS:

-- QUESTION 1:
-- Display the title of the movie, customers first name, and last name who rented it.
-- Hint: Use JOIN between the film, inventory, rental, and customer tables.
SELECT
    f.title AS movie_title,
    c.first_name AS customer_first_name,
    c.last_name AS customer_last_name
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
JOIN
    customer c ON r.customer_id = c.customer_id;

-- Question 2:
-- Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
-- Hint: Use JOIN between the film actor, film, and actor tables.
SELECT
    a.actor_id,
    a.first_name,
    a.last_name
FROM
    actor a
JOIN
    film_actor fa ON a.actor_id = fa.actor_id
JOIN
    film f ON fa.film_id = f.film_id
WHERE
    f.title = 'Gone with the Wind';
    
-- E. GROUP BY:
-- Question 1:
-- Determine the total number of rentals for each category of movies.
-- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.
SELECT
    c.category_id,
    c.name AS category_name,
    COUNT(r.rental_id) AS total_rentals
FROM
    film_category fc
JOIN
    film f ON fc.film_id = f.film_id
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
JOIN
    category c ON fc.category_id = c.category_id
GROUP BY
    c.category_id, c.name
ORDER BY
    total_rentals DESC;

-- Question 2:
-- Find the average rental rate of movies in each language.
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY.
SELECT
    l.language_id,
    l.name AS language_name,
    AVG(f.rental_rate) AS average_rental_rate
FROM
    film f
JOIN
    language l ON f.language_id = l.language_id
GROUP BY
    l.language_id, l.name
ORDER BY
    average_rental_rate DESC;
    
-- F.JOINS:
-- Question 3:
-- Retrieve the customer names along with the total amount they've spent on rentals.
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_amount_spent
FROM
    customer c
JOIN
    payment p ON c.customer_id = p.customer_id
JOIN
    rental r ON c.customer_id = r.customer_id
GROUP BY
    c.customer_id, c.first_name, c.last_name
ORDER BY
    total_amount_spent DESC;
    
-- Question 4:
-- List the titles of movies rented by each customer in a particular city (e.g., 'London').
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
SELECT
    ct.city,
    c.customer_id,
    c.first_name,
    c.last_name,
    f.title AS movie_title
FROM
    customer c
JOIN
    address a ON c.address_id = a.address_id
JOIN
    city ct ON a.city_id = ct.city_id
JOIN
    rental r ON c.customer_id = r.customer_id
JOIN
    inventory i ON r.inventory_id = i.inventory_id
JOIN
    film f ON i.film_id = f.film_id
GROUP BY
    ct.city, c.customer_id, c.first_name, c.last_name, f.title
ORDER BY
    c.customer_id, f.title;

-- ADVANCED JOINS and GROUP BY:    

-- Question 5:
-- Display the top 5 rented movies along with the number of times they've been rented.
-- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.
SELECT
    f.title AS movie_title,
    COUNT(r.rental_id) AS rental_count
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    f.title
ORDER BY
    rental_count DESC
LIMIT 5;

-- Question 6:
-- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
SELECT
    c.customer_id,
    c.first_name,
    c.last_name
FROM
    customer c
JOIN
    rental r ON c.customer_id = r.customer_id
JOIN
    inventory i ON r.inventory_id = i.inventory_id
JOIN
    store s ON i.store_id = s.store_id
WHERE
    s.store_id IN (1, 2)
GROUP BY
    c.customer_id, c.first_name, c.last_name
HAVING
    COUNT(DISTINCT s.store_id) = 2;